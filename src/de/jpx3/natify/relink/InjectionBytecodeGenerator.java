package de.jpx3.natify.relink;

import org.objectweb.asm.*;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.InsnList;
import org.objectweb.asm.tree.MethodNode;

import java.util.Map;

import static org.objectweb.asm.Opcodes.*;

public final class InjectionBytecodeGenerator {

  public static InsnList generate(String owner, Map<String, String> files) {
    ClassWriter classWriter = new ClassWriter(0);
    MethodVisitor methodVisitor;

    classWriter.visit(V1_8, ACC_PUBLIC | ACC_FINAL | ACC_SUPER, "INVALID", null, "java/lang/Object", null);

//    {
//      methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null);
//      methodVisitor.visitCode();
//      methodVisitor.visitVarInsn(ALOAD, 0);
//      methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
//      methodVisitor.visitInsn(RETURN);
//      methodVisitor.visitMaxs(1, 1);
//      methodVisitor.visitEnd();
//    }
    {
      methodVisitor = classWriter.visitMethod(ACC_PUBLIC | ACC_STATIC, "invalid", "()V", null, null);
      methodVisitor.visitCode();
      Label label0 = new Label();
      Label label1 = new Label();
      Label label2 = new Label();
      methodVisitor.visitTryCatchBlock(label0, label1, label2, "java/io/IOException");
      Label label3 = new Label();
      Label label4 = new Label();
      Label label5 = new Label();
      methodVisitor.visitTryCatchBlock(label3, label4, label5, "java/lang/Throwable");
      Label label6 = new Label();
      Label label7 = new Label();
      Label label8 = new Label();
      methodVisitor.visitTryCatchBlock(label6, label7, label8, "java/lang/Throwable");
      Label label9 = new Label();
      methodVisitor.visitTryCatchBlock(label6, label7, label9, null);
      Label label10 = new Label();
      Label label11 = new Label();
      Label label12 = new Label();
      methodVisitor.visitTryCatchBlock(label10, label11, label12, "java/lang/Throwable");
      Label label13 = new Label();
      methodVisitor.visitTryCatchBlock(label8, label13, label9, null);
      Label label14 = new Label();
      Label label15 = new Label();
      Label label16 = new Label();
      methodVisitor.visitTryCatchBlock(label14, label15, label16, "java/lang/Throwable");
      Label label17 = new Label();
      Label label18 = new Label();
      Label label19 = new Label();
      methodVisitor.visitTryCatchBlock(label17, label18, label19, "java/lang/Throwable");
      Label label20 = new Label();
      methodVisitor.visitTryCatchBlock(label17, label18, label20, null);
      Label label21 = new Label();
      Label label22 = new Label();
      Label label23 = new Label();
      methodVisitor.visitTryCatchBlock(label21, label22, label23, "java/lang/Throwable");
      Label label24 = new Label();
      methodVisitor.visitTryCatchBlock(label19, label24, label20, null);
      Label label25 = new Label();
      Label label26 = new Label();
      Label label27 = new Label();
      methodVisitor.visitTryCatchBlock(label25, label26, label27, "java/io/IOException");
      methodVisitor.visitLdcInsn("os.arch");
      methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/System", "getProperty", "(Ljava/lang/String;)Ljava/lang/String;", false);
      methodVisitor.visitLdcInsn("64");
      methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "contains", "(Ljava/lang/CharSequence;)Z", false);
      methodVisitor.visitVarInsn(ISTORE, 0);
      methodVisitor.visitLdcInsn("os.name");
      methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/System", "getProperty", "(Ljava/lang/String;)Ljava/lang/String;", false);
      methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "toLowerCase", "()Ljava/lang/String;", false);
      methodVisitor.visitVarInsn(ASTORE, 1);
      methodVisitor.visitInsn(ACONST_NULL);
      methodVisitor.visitVarInsn(ASTORE, 2);

      for (String operatingSystem : files.keySet()) {
        String fileName = files.get(operatingSystem);

        methodVisitor.visitVarInsn(ALOAD, 1);
        methodVisitor.visitLdcInsn(operatingSystem);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "contains", "(Ljava/lang/CharSequence;)Z", false);
        Label label28 = new Label();
        methodVisitor.visitJumpInsn(IFEQ, label28);
        methodVisitor.visitVarInsn(ILOAD, 0);
        methodVisitor.visitJumpInsn(IFEQ, label28);
        methodVisitor.visitLdcInsn("/" + fileName);
        methodVisitor.visitVarInsn(ASTORE, 2);
        methodVisitor.visitLabel(label28);
        //methodVisitor.visitFrame(Opcodes.F_NEW, 3, new Object[]{Opcodes.INTEGER, "java/lang/String", "java/lang/String"}, 0, new Object[]{});
      }

//      methodVisitor.visitVarInsn(ALOAD, 1);
//      methodVisitor.visitLdcInsn("lin");
//      methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "contains", "(Ljava/lang/CharSequence;)Z", false);
//      Label label29 = new Label();
//      methodVisitor.visitJumpInsn(IFEQ, label29);
//      methodVisitor.visitVarInsn(ILOAD, 0);
//      methodVisitor.visitJumpInsn(IFEQ, label29);
//      methodVisitor.visitLdcInsn("<target path>");
//      methodVisitor.visitVarInsn(ASTORE, 2);
//      methodVisitor.visitLabel(label29);
//      //methodVisitor.visitFrame(Opcodes.F_NEW, 3, new Object[]{Opcodes.INTEGER, "java/lang/String", "java/lang/String"}, 0, new Object[]{});
//
      methodVisitor.visitVarInsn(ALOAD, 2);
      methodVisitor.visitJumpInsn(IFNONNULL, label0);
      methodVisitor.visitTypeInsn(NEW, "java/lang/RuntimeException");
      methodVisitor.visitInsn(DUP);
      methodVisitor.visitLdcInsn("Unknown operating system or architecture");
      methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/RuntimeException", "<init>", "(Ljava/lang/String;)V", false);
      methodVisitor.visitInsn(ATHROW);
      methodVisitor.visitLabel(label0);
      //methodVisitor.visitFrame(Opcodes.F_NEW, 3, new Object[]{Opcodes.INTEGER, "java/lang/String", "java/lang/String"}, 0, new Object[]{});
      methodVisitor.visitLdcInsn("natify");
      methodVisitor.visitInsn(ACONST_NULL);
      methodVisitor.visitMethodInsn(INVOKESTATIC, "java/io/File", "createTempFile", "(Ljava/lang/String;Ljava/lang/String;)Ljava/io/File;", false);
      methodVisitor.visitVarInsn(ASTORE, 3);
      methodVisitor.visitVarInsn(ALOAD, 3);
      methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "deleteOnExit", "()V", false);
//      methodVisitor.visitVarInsn(ALOAD, 3);
//      methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "exists", "()Z", false);
//      methodVisitor.visitJumpInsn(IFNE, label1);
//      methodVisitor.visitTypeInsn(NEW, "java/io/IOException");
//      methodVisitor.visitInsn(DUP);
//      methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/io/IOException", "<init>", "()V", false);
//      methodVisitor.visitInsn(ATHROW);
      methodVisitor.visitLabel(label1);
      //methodVisitor.visitFrame(Opcodes.F_NEW, 4, new Object[]{Opcodes.INTEGER, "java/lang/String", "java/lang/String", "java/io/File"}, 0, new Object[]{});
      Label label30 = new Label();
      methodVisitor.visitJumpInsn(GOTO, label30);
      methodVisitor.visitLabel(label2);
      //methodVisitor.visitFrame(Opcodes.F_NEW, 3, new Object[]{Opcodes.INTEGER, "java/lang/String", "java/lang/String"}, 1, new Object[]{"java/io/IOException"});
      methodVisitor.visitVarInsn(ASTORE, 4);
      methodVisitor.visitTypeInsn(NEW, "java/lang/UnsatisfiedLinkError");
      methodVisitor.visitInsn(DUP);
      methodVisitor.visitLdcInsn("Failed to create temp file");
      methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/UnsatisfiedLinkError", "<init>", "(Ljava/lang/String;)V", false);
      methodVisitor.visitInsn(ATHROW);
      methodVisitor.visitLabel(label30);
      //methodVisitor.visitFrame(Opcodes.F_NEW, 4, new Object[]{Opcodes.INTEGER, "java/lang/String", "java/lang/String", "java/io/File"}, 0, new Object[]{});
      methodVisitor.visitIntInsn(SIPUSH, 2048);
      methodVisitor.visitIntInsn(NEWARRAY, T_BYTE);
      methodVisitor.visitVarInsn(ASTORE, 4);
      methodVisitor.visitLabel(label25);
      methodVisitor.visitLdcInsn(Type.getType("L" + owner + ";"));
      methodVisitor.visitVarInsn(ALOAD, 2);
      methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getResourceAsStream", "(Ljava/lang/String;)Ljava/io/InputStream;", false);
      methodVisitor.visitVarInsn(ASTORE, 5);
      methodVisitor.visitInsn(ACONST_NULL);
      methodVisitor.visitVarInsn(ASTORE, 6);
      methodVisitor.visitLabel(label17);
      methodVisitor.visitTypeInsn(NEW, "java/io/FileOutputStream");
      methodVisitor.visitInsn(DUP);
      methodVisitor.visitVarInsn(ALOAD, 3);
      methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/io/FileOutputStream", "<init>", "(Ljava/io/File;)V", false);
      methodVisitor.visitVarInsn(ASTORE, 7);
      methodVisitor.visitInsn(ACONST_NULL);
      methodVisitor.visitVarInsn(ASTORE, 8);
      methodVisitor.visitLabel(label6);
      //methodVisitor.visitFrame(Opcodes.F_NEW, 9, new Object[]{Opcodes.INTEGER, "java/lang/String", "java/lang/String", "java/io/File", "[B", "java/io/InputStream", "java/lang/Throwable", "java/io/FileOutputStream", "java/lang/Throwable"}, 0, new Object[]{});
      methodVisitor.visitVarInsn(ALOAD, 5);
      methodVisitor.visitVarInsn(ALOAD, 4);
      methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/InputStream", "read", "([B)I", false);
      methodVisitor.visitInsn(DUP);
      methodVisitor.visitVarInsn(ISTORE, 9);
      methodVisitor.visitInsn(ICONST_M1);
      methodVisitor.visitJumpInsn(IF_ICMPEQ, label7);
      methodVisitor.visitVarInsn(ALOAD, 7);
      methodVisitor.visitVarInsn(ALOAD, 4);
      methodVisitor.visitInsn(ICONST_0);
      methodVisitor.visitVarInsn(ILOAD, 9);
      methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/FileOutputStream", "write", "([BII)V", false);
      methodVisitor.visitJumpInsn(GOTO, label6);
      methodVisitor.visitLabel(label7);
      //methodVisitor.visitFrame(Opcodes.F_NEW, 9, new Object[]{Opcodes.INTEGER, "java/lang/String", "java/lang/String", "java/io/File", "[B", "java/io/InputStream", "java/lang/Throwable", "java/io/FileOutputStream", "java/lang/Throwable"}, 0, new Object[]{});
//      methodVisitor.visitVarInsn(ALOAD, 7);
//      methodVisitor.visitJumpInsn(IFNULL, label18);
//      methodVisitor.visitVarInsn(ALOAD, 8);
      Label label31 = new Label();
//      methodVisitor.visitJumpInsn(IFNULL, label31);
      methodVisitor.visitLabel(label3);
      methodVisitor.visitVarInsn(ALOAD, 7);
      methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/FileOutputStream", "close", "()V", false);
      methodVisitor.visitLabel(label4);
      methodVisitor.visitJumpInsn(GOTO, label18);
      methodVisitor.visitLabel(label5);
      //methodVisitor.visitFrame(Opcodes.F_NEW, 9, new Object[]{Opcodes.INTEGER, "java/lang/String", "java/lang/String", "java/io/File", "[B", "java/io/InputStream", "java/lang/Throwable", "java/io/FileOutputStream", "java/lang/Throwable"}, 1, new Object[]{"java/lang/Throwable"});
//      methodVisitor.visitVarInsn(ASTORE, 9);
//      methodVisitor.visitVarInsn(ALOAD, 8);
//      methodVisitor.visitVarInsn(ALOAD, 9);
//      methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Throwable", "addSuppressed", "(Ljava/lang/Throwable;)V", false);
//      methodVisitor.visitJumpInsn(GOTO, label18);
      methodVisitor.visitLabel(label31);
      //methodVisitor.visitFrame(Opcodes.F_NEW, 9, new Object[]{Opcodes.INTEGER, "java/lang/String", "java/lang/String", "java/io/File", "[B", "java/io/InputStream", "java/lang/Throwable", "java/io/FileOutputStream", "java/lang/Throwable"}, 0, new Object[]{});
//      methodVisitor.visitVarInsn(ALOAD, 7);
//      methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/FileOutputStream", "close", "()V", false);
//      methodVisitor.visitJumpInsn(GOTO, label18);
      methodVisitor.visitLabel(label8);
      //methodVisitor.visitFrame(Opcodes.F_NEW, 9, new Object[]{Opcodes.INTEGER, "java/lang/String", "java/lang/String", "java/io/File", "[B", "java/io/InputStream", "java/lang/Throwable", "java/io/FileOutputStream", "java/lang/Throwable"}, 1, new Object[]{"java/lang/Throwable"});
//      methodVisitor.visitVarInsn(ASTORE, 9);
//      methodVisitor.visitVarInsn(ALOAD, 9);
//      methodVisitor.visitVarInsn(ASTORE, 8);
//      methodVisitor.visitVarInsn(ALOAD, 9);
//      methodVisitor.visitInsn(ATHROW);
      methodVisitor.visitLabel(label9);
      //methodVisitor.visitFrame(Opcodes.F_NEW, 9, new Object[]{Opcodes.INTEGER, "java/lang/String", "java/lang/String", "java/io/File", "[B", "java/io/InputStream", "java/lang/Throwable", "java/io/FileOutputStream", "java/lang/Throwable"}, 1, new Object[]{"java/lang/Throwable"});
//      methodVisitor.visitVarInsn(ASTORE, 10);
//      methodVisitor.visitLabel(label13);
//      methodVisitor.visitVarInsn(ALOAD, 7);
      Label label32 = new Label();
//      methodVisitor.visitJumpInsn(IFNULL, label32);
//      methodVisitor.visitVarInsn(ALOAD, 8);
      Label label33 = new Label();
//      methodVisitor.visitJumpInsn(IFNULL, label33);
//      methodVisitor.visitLabel(label10);
//      methodVisitor.visitVarInsn(ALOAD, 7);
//      methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/FileOutputStream", "close", "()V", false);
//      methodVisitor.visitLabel(label11);
//      methodVisitor.visitJumpInsn(GOTO, label32);
      methodVisitor.visitLabel(label12);
      //methodVisitor.visitFrame(Opcodes.F_NEW, 11, new Object[]{Opcodes.INTEGER, "java/lang/String", "java/lang/String", "java/io/File", "[B", "java/io/InputStream", "java/lang/Throwable", "java/io/FileOutputStream", "java/lang/Throwable", Opcodes.TOP, "java/lang/Throwable"}, 1, new Object[]{"java/lang/Throwable"});
//      methodVisitor.visitVarInsn(ASTORE, 11);
//      methodVisitor.visitVarInsn(ALOAD, 8);
//      methodVisitor.visitVarInsn(ALOAD, 11);
//      methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Throwable", "addSuppressed", "(Ljava/lang/Throwable;)V", false);
//      methodVisitor.visitJumpInsn(GOTO, label32);
      methodVisitor.visitLabel(label33);
      //methodVisitor.visitFrame(Opcodes.F_NEW, 11, new Object[]{Opcodes.INTEGER, "java/lang/String", "java/lang/String", "java/io/File", "[B", "java/io/InputStream", "java/lang/Throwable", "java/io/FileOutputStream", "java/lang/Throwable", Opcodes.TOP, "java/lang/Throwable"}, 0, new Object[]{});
//      methodVisitor.visitVarInsn(ALOAD, 7);
//      methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/FileOutputStream", "close", "()V", false);
      methodVisitor.visitLabel(label32);
      //methodVisitor.visitFrame(Opcodes.F_NEW, 11, new Object[]{Opcodes.INTEGER, "java/lang/String", "java/lang/String", "java/io/File", "[B", "java/io/InputStream", "java/lang/Throwable", "java/io/FileOutputStream", "java/lang/Throwable", Opcodes.TOP, "java/lang/Throwable"}, 0, new Object[]{});
//      methodVisitor.visitVarInsn(ALOAD, 10);
//      methodVisitor.visitInsn(ATHROW);
      methodVisitor.visitLabel(label18);
      //methodVisitor.visitFrame(Opcodes.F_NEW, 7, new Object[]{Opcodes.INTEGER, "java/lang/String", "java/lang/String", "java/io/File", "[B", "java/io/InputStream", "java/lang/Throwable"}, 0, new Object[]{});
//      methodVisitor.visitVarInsn(ALOAD, 5);
//      methodVisitor.visitJumpInsn(IFNULL, label26);
//      methodVisitor.visitVarInsn(ALOAD, 6);
      Label label34 = new Label();
//      methodVisitor.visitJumpInsn(IFNULL, label34);
      methodVisitor.visitLabel(label14);
      methodVisitor.visitVarInsn(ALOAD, 5);
      methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/InputStream", "close", "()V", false);
      methodVisitor.visitLabel(label15);
      methodVisitor.visitJumpInsn(GOTO, label26);
      methodVisitor.visitLabel(label16);
      //methodVisitor.visitFrame(Opcodes.F_NEW, 7, new Object[]{Opcodes.INTEGER, "java/lang/String", "java/lang/String", "java/io/File", "[B", "java/io/InputStream", "java/lang/Throwable"}, 1, new Object[]{"java/lang/Throwable"});
      methodVisitor.visitVarInsn(ASTORE, 7);
      methodVisitor.visitVarInsn(ALOAD, 6);
      methodVisitor.visitVarInsn(ALOAD, 7);
      methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Throwable", "addSuppressed", "(Ljava/lang/Throwable;)V", false);
      methodVisitor.visitJumpInsn(GOTO, label26);
      methodVisitor.visitLabel(label34);
      //methodVisitor.visitFrame(Opcodes.F_NEW, 7, new Object[]{Opcodes.INTEGER, "java/lang/String", "java/lang/String", "java/io/File", "[B", "java/io/InputStream", "java/lang/Throwable"}, 0, new Object[]{});
      methodVisitor.visitVarInsn(ALOAD, 5);
      methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/InputStream", "close", "()V", false);
      methodVisitor.visitJumpInsn(GOTO, label26);
      methodVisitor.visitLabel(label19);
      //methodVisitor.visitFrame(Opcodes.F_NEW, 7, new Object[]{Opcodes.INTEGER, "java/lang/String", "java/lang/String", "java/io/File", "[B", "java/io/InputStream", "java/lang/Throwable"}, 1, new Object[]{"java/lang/Throwable"});
      methodVisitor.visitVarInsn(ASTORE, 7);
      methodVisitor.visitVarInsn(ALOAD, 7);
      methodVisitor.visitVarInsn(ASTORE, 6);
      methodVisitor.visitVarInsn(ALOAD, 7);
      methodVisitor.visitInsn(ATHROW);
      methodVisitor.visitLabel(label20);
      //methodVisitor.visitFrame(Opcodes.F_NEW, 7, new Object[]{Opcodes.INTEGER, "java/lang/String", "java/lang/String", "java/io/File", "[B", "java/io/InputStream", "java/lang/Throwable"}, 1, new Object[]{"java/lang/Throwable"});
      methodVisitor.visitVarInsn(ASTORE, 12);
      methodVisitor.visitLabel(label24);
      methodVisitor.visitVarInsn(ALOAD, 5);
      Label label35 = new Label();
      methodVisitor.visitJumpInsn(IFNULL, label35);
      methodVisitor.visitVarInsn(ALOAD, 6);
      Label label36 = new Label();
      methodVisitor.visitJumpInsn(IFNULL, label36);
      methodVisitor.visitLabel(label21);
      methodVisitor.visitVarInsn(ALOAD, 5);
      methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/InputStream", "close", "()V", false);
      methodVisitor.visitLabel(label22);
      methodVisitor.visitJumpInsn(GOTO, label35);
      methodVisitor.visitLabel(label23);
      //methodVisitor.visitFrame(Opcodes.F_NEW, 13, new Object[]{Opcodes.INTEGER, "java/lang/String", "java/lang/String", "java/io/File", "[B", "java/io/InputStream", "java/lang/Throwable", Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, "java/lang/Throwable"}, 1, new Object[]{"java/lang/Throwable"});
      methodVisitor.visitVarInsn(ASTORE, 13);
      methodVisitor.visitVarInsn(ALOAD, 6);
      methodVisitor.visitVarInsn(ALOAD, 13);
      methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Throwable", "addSuppressed", "(Ljava/lang/Throwable;)V", false);
      methodVisitor.visitJumpInsn(GOTO, label35);
      methodVisitor.visitLabel(label36);
      //methodVisitor.visitFrame(Opcodes.F_NEW, 13, new Object[]{Opcodes.INTEGER, "java/lang/String", "java/lang/String", "java/io/File", "[B", "java/io/InputStream", "java/lang/Throwable", Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, "java/lang/Throwable"}, 0, new Object[]{});
      methodVisitor.visitVarInsn(ALOAD, 5);
      methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/InputStream", "close", "()V", false);
      methodVisitor.visitLabel(label35);
      //methodVisitor.visitFrame(Opcodes.F_NEW, 13, new Object[]{Opcodes.INTEGER, "java/lang/String", "java/lang/String", "java/io/File", "[B", "java/io/InputStream", "java/lang/Throwable", Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, "java/lang/Throwable"}, 0, new Object[]{});
      methodVisitor.visitVarInsn(ALOAD, 12);
      methodVisitor.visitInsn(ATHROW);
      methodVisitor.visitLabel(label26);
      //methodVisitor.visitFrame(Opcodes.F_NEW, 5, new Object[]{Opcodes.INTEGER, "java/lang/String", "java/lang/String", "java/io/File", "[B"}, 0, new Object[]{});
      Label label37 = new Label();
      methodVisitor.visitJumpInsn(GOTO, label37);
      methodVisitor.visitLabel(label27);
      //methodVisitor.visitFrame(Opcodes.F_NEW, 5, new Object[]{Opcodes.INTEGER, "java/lang/String", "java/lang/String", "java/io/File", "[B"}, 1, new Object[]{"java/io/IOException"});
      methodVisitor.visitVarInsn(ASTORE, 5);
      methodVisitor.visitTypeInsn(NEW, "java/lang/UnsatisfiedLinkError");
      methodVisitor.visitInsn(DUP);
      methodVisitor.visitTypeInsn(NEW, "java/lang/StringBuilder");
      methodVisitor.visitInsn(DUP);
      methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
      methodVisitor.visitLdcInsn("Failed to copy file: ");
      methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
      methodVisitor.visitVarInsn(ALOAD, 5);
      methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/IOException", "getMessage", "()Ljava/lang/String;", false);
      methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
      methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
      methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/UnsatisfiedLinkError", "<init>", "(Ljava/lang/String;)V", false);
      methodVisitor.visitInsn(ATHROW);
      methodVisitor.visitLabel(label37);
      methodVisitor.visitVarInsn(ALOAD, 3);
      methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "getAbsolutePath", "()Ljava/lang/String;", false);
      methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/System", "load", "(Ljava/lang/String;)V", false);
      methodVisitor.visitInsn(RETURN);
      methodVisitor.visitMaxs(4, 14);
      methodVisitor.visitEnd();
    }
    classWriter.visitEnd();

    ClassReader cr = new ClassReader(classWriter.toByteArray());
    ClassNode cn = new ClassNode();
    try {
      cr.accept(cn, 0b1000);
    } catch (Exception e) {
      e.printStackTrace();
    }
    for (MethodNode method : cn.methods) {
      if (method.name.equalsIgnoreCase("invalid")) {
        return method.instructions;
      }
    }
    throw new IllegalStateException();
  }
}
